% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/clusterBMA.R
\name{clusterBMA}
\alias{clusterBMA}
\title{clusterBMA - Apply Bayesian model averaging to combine multiple clustering solutions for a given dataset}
\usage{
clusterBMA(
  input_data,
  cluster_prob_matrices,
  n_final_clust,
  prior_weights = "equal",
  wt_crit_name = "Calinski_Harabasz",
  wt_crit_direction = "max"
)
}
\arguments{
\item{input_data}{Data frame or matrix of original input data used for clustering algorithms}

\item{cluster_prob_matrices}{LIST of allocation probability matrices from clustering solutions. For 'soft' clustering algorithms like ClusterR::GMM(), this is often an available output - e.g. from the object generated by `ClusterR::predict_GMM()` it is stored in $cluster_proba. For 'hard' clustering algorithms like k-means, a helper function `clusterBMA::hard_to_prob_fn()` can be used to convert a vector of cluster allocation labels to a NxK matrix of cluster allocation probabilities. The number of clusters K can vary between input models.}

\item{n_final_clust}{Number of clusters for final BMA solution (Can be chosen as e.g. maximum number of clusters across any input solution, or desired final number for K based on clustering internal validation criteria). Final number of clusters may be lower than this selected maximum due to L2 regularisation which can empty redundant clusters as part of the symmetric simplex matrix factorisation step.}

\item{prior_weights}{(Optional) Vector of weights assigning manual prior weight to each input solution. If left blank, equal prior weights are assigned by default.}

\item{wt_crit_name}{Clustering Internal Validation Index (CIVI) used to approximate posterior model probability. The default selection is the Calinski Harabasz index. Indices can be chosen from the list available in `clusterCrit::getCriteriaNames(isInternal=T)`}

\item{wt_crit_direction}{Direction of selected CIVI - "max" if to be maximised, "min" if to be minimised. Set to "max" by default for Calinski Harabasz index. See page 21 of clusterCrit manual https://rdrr.io/cran/clusterCrit/f/inst/doc/clusterCrit.pdf}
}
\value{
Returns a list of outputs from clusterBMA. \enumerate{\item Consensus matrix - element-wise weighted average of input similarity matrices \item Allocation probability matrix - clusterBMA cluster allocation probabilities \item clusterBMA cluster LABELS with associated probability and uncertainty. Key output for most users. \item Table counting points in each averaged cluster (crisp projection to maximum probability clusters for each point) \item Weights calculated from CIVI for each algorithm. \item weights multiplied by prior probabilities - should be the same as output [5] if prior model weights are set to be equal (default). \item Heatmap of Consensus matrix}
}
\description{
Each entry in cluster_prob_matrices should be a NxK_m matrix A_m where N = number of datapoints (rows), and K_m = number of clusters (columns).
Each entry A_ik represents the probability that point i is allocated to cluster k in each solution
}
\details{
For 'hard' clustering solutions (1 or 0 probability of cluster allocation) such as k-means or hierarchical clustering, the allocation matrix can be created using the function clusterBMA::hard_to_prob_fn()

For 'soft' clustering solutions e.g. GMM, this is usually accessible from the model output. E.g. the object cluster_proba within the result from ClusterR::predictGMM() on a GMM object produced from ClusterR::GMM()

`wt_crit_name` is the Clustering Internal Validation Index (CIVI) used to approximate posterior model probability. The default selection is the Calinski Harabasz index. Indices can be chosen from the list available in `clusterCrit::getCriteriaNames(isInternal=T)`
See clusterCrit documentation for details on other available CIVIs: https://rdrr.io/cran/clusterCrit/f/inst/doc/clusterCrit.pdf

Outputs in results list can be indexed like test_bma_results[[1]] for consensus matrix, test_bma_results[[3]] for cluster labels and probability/uncertainty, etc. Details in README on Github, and in package vignette
}
